#
# Try to make up for Ruby's lack of easy setup.py develop sorta thing.
#

function fakegem() {
    HAVE_RUBYLIB=$(env | grep RUBYLIB)
    if [[ $(env | grep GEM_HOME) != "" ]]; then
        projects=~/Code
        for project in `ls -1 $projects`; do
            bin=$projects/$project/bin
            lib=$projects/$project/lib
            # if project seems to be ruby and doesn't exist as an installed gem
            has_ruby=$(find $projects/$project -maxdepth 2 -name "*.rb")
            has_gem=$(find $GEM_HOME/gems -maxdepth 1 -mindepth 1 -name "$project*")
            # and if it's not already in our bin/lib paths
            in_path=$(echo $PATH | grep $bin)
            in_lib=$(echo $RUBYLIB | grep $lib)
            if ( \
                [[ $has_ruby != "" ]] \
                && [[ $has_gem == "" ]] \
                && [[ ! ($in_path != "" || $in_lib != "") ]] \
            ); then
                # add project/bin to PATH and project/lib to RUBYLIB
                export PATH=$PATH:$bin
                if [[ $HAVE_RUBYLIB != "" ]]; then
                    export RUBYLIB=$RUBYLIB:$lib
                else
                    export RUBYLIB=$lib
                fi
            fi
        done
    fi
}
fakegem

#
# RVM (may eventually replace the above, probably overwrites it anyway)
#

_rvm_home=~/.rvm
_rvm=$_rvm_home/scripts/rvm
if [[ -s $_rvm ]] ; then
    source $_rvm
fi

function activate_gemset() {
    [ ! -e $_rvm_home ] && return
    gemset=$1
    matches=`find $_rvm_home/gems -type d -mindepth 1 -maxdepth 1 -name "*@$gemset"`
    if [[ -n $matches ]]; then
        num_matches=`echo "$matches" | wc -l`
        if [[ $num_matches -eq 1 ]]; then
            rvm `basename $matches`
        fi
    fi
}
